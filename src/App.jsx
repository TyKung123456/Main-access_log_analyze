// src/App.jsx - Updated with Simple Design (Fixed)
import React, { useState, useEffect } from 'react';
import aiService from './services/aiService.js';
import Header from './components/Layout/Header.jsx';
import NavigationTabs from './components/Layout/NavigationTabs.jsx';
import UploadPage from './components/Upload/UploadPage.jsx';
import DashboardPage from './components/Dashboard/DashboardPage.jsx';
import ChatPage from './components/Chat/ChatPage.jsx';
// SecurityDashboard removed - not using anymore
import SecurityAlerts from './components/Security/SecurityAlerts.jsx';
import { useLogData } from './hooks/useLogData.js';
import { useFilters } from './hooks/useFilters.js';
import { useChat } from './hooks/useChat.js';
import { useUpload } from './hooks/useUpload.js';

const AccessLogAnalyzer = () => {
  const [activeTab, setActiveTab] = useState('upload');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [systemStatus, setSystemStatus] = useState({
    ai: 'checking',
    database: 'checking',
    upload: 'checking'
  });

  // Custom hooks
  const { logData, filteredData, stats, chartData, refreshData } = useLogData();
  const { filters, handleFilterChange } = useFilters(logData);
  const { chatMessages, currentMessage, setCurrentMessage, handleSendMessage, isAnalyzing } = useChat(stats);
  const {
    isUploading,
    uploadProgress,
    uploadResult,
    uploadError,
    handleFileUpload
  } = useUpload();

  // Additional state
  const [uploadStats, setUploadStats] = useState(null);
  const [validationResults, setValidationResults] = useState(null);

  // Enhanced upload properties
  const canCancel = false;
  const isCompleted = !isUploading && (uploadResult !== null || uploadError !== null);
  const hasErrors = uploadError !== null;
  const hasWarnings = uploadResult?.warnings?.length > 0;
  const uploadSuccessRate = uploadResult?.statistics
    ? ((uploadResult.statistics.validRows / uploadResult.statistics.totalRows) * 100).toFixed(1)
    : null;

  // System health check
  useEffect(() => {
    const checkSystemHealth = async () => {
      try {
        setIsLoading(true);

        // Check AI Service
        try {
          const aiStatus = await aiService.checkAvailability();
          setSystemStatus(prev => ({ ...prev, ai: 'connected' }));
          console.log('тЬЕ AI Service Status:', aiStatus);
        } catch (aiError) {
          setSystemStatus(prev => ({ ...prev, ai: 'disconnected' }));
          console.warn('тЪая╕П AI Service unavailable:', aiError);
        }

        // Check Database connectivity
        try {
          const response = await fetch('/api/health');
          if (response.ok) {
            setSystemStatus(prev => ({ ...prev, database: 'connected' }));
          } else {
            throw new Error(`Database health check failed: ${response.status}`);
          }
        } catch (dbError) {
          setSystemStatus(prev => ({ ...prev, database: 'disconnected' }));
          console.warn('тЪая╕П Database connectivity issue:', dbError.message);
        }

        // Check Upload service
        try {
          const response = await fetch('/api/upload/stats');
          if (response.ok) {
            setSystemStatus(prev => ({ ...prev, upload: 'connected' }));
          } else if (response.status === 404) {
            const altResponse = await fetch('/api/logs');
            if (altResponse.ok) {
              setSystemStatus(prev => ({ ...prev, upload: 'connected' }));
            } else {
              throw new Error('Upload service endpoints not found');
            }
          } else {
            throw new Error(`Upload service check failed: ${response.status}`);
          }
        } catch (uploadError) {
          setSystemStatus(prev => ({ ...prev, upload: 'disconnected' }));
          console.warn('тЪая╕П Upload service issue:', uploadError.message);

          if (process.env.NODE_ENV === 'development') {
            console.info('ЁЯТб Development mode: Upload service will be available when backend starts');
          }
        }

        const connectedServices = Object.values(systemStatus).filter(status => status === 'connected').length;
        if (connectedServices === 0 && process.env.NODE_ENV !== 'development') {
          setError('р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Бр╕▒р╕Ър╕гр╕░р╕Ър╕Ър╣Др╕Фр╣Й р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Ар╕Др╕гр╕╖р╕нр╕Вр╣Ир╕▓р╕в');
        } else {
          setError(null);
        }

      } catch (error) {
        console.error('тЭМ System health check failed:', error);
        if (process.env.NODE_ENV === 'production') {
          setError('р╕гр╕░р╕Ър╕Ър╕Ър╕▓р╕Зр╕кр╣Ир╕зр╕Щр╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ - р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕Ьр╕╣р╣Йр╕Фр╕╣р╣Бр╕ер╕гр╕░р╕Ър╕Ъ');
        }
      } finally {
        setIsLoading(false);
      }
    };

    checkSystemHealth();

    let healthCheckInterval;
    if (process.env.NODE_ENV === 'production') {
      healthCheckInterval = setInterval(checkSystemHealth, 5 * 60 * 1000);
    }

    return () => {
      if (healthCheckInterval) {
        clearInterval(healthCheckInterval);
      }
    };
  }, []);

  // Enhanced upload success handler
  useEffect(() => {
    if (uploadResult && uploadResult.success) {
      const stats = {
        fileName: uploadResult.fileName || 'Unknown',
        fileSize: uploadResult.fileSize || 0,
        totalRecords: uploadResult.recordCount || 0,
        validRecords: uploadResult.recordCount || 0,
        insertedRecords: uploadResult.recordCount || 0,
        processingTime: uploadResult.processingTime || 'N/A',
        success: true,
        uploadTime: new Date().toISOString()
      };
      setUploadStats(stats);

      localStorage.setItem('lastUploadStats', JSON.stringify(stats));

      setTimeout(() => {
        refreshData();
        console.log('ЁЯФД Refreshing data after successful upload');
      }, 1000);
    }
  }, [uploadResult, refreshData]);

  // Error handlers
  const handleError = (error, errorInfo) => {
    console.error('Application Error:', error, errorInfo);
    setError('р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕гр╕░р╕Ър╕Ъ р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕З');
  };

  const clearError = () => {
    setError(null);
  };

  // Enhanced export report
  const exportReport = async () => {
    try {
      setIsLoading(true);

      const systemInfo = `р╕кр╕Цр╕▓р╕Щр╕░р╕гр╕░р╕Ър╕Ъ:
- AI Service: ${systemStatus.ai === 'connected' ? 'тЬЕ р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ' : 'тЭМ р╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ'}
- Database: ${systemStatus.database === 'connected' ? 'тЬЕ р╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╣Бр╕ер╣Йр╕з' : 'тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н'}
- Upload Service: ${systemStatus.upload === 'connected' ? 'тЬЕ р╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ' : 'тЭМ р╣Др╕бр╣Ир╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ'}`;

      const uploadInfo = uploadStats ? `
ЁЯУд р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕ер╣Ир╕▓р╕кр╕╕р╕Ф:
- р╣Др╕Яр╕ер╣М: ${uploadStats.fileName || 'N/A'}
- р╕Вр╕Щр╕▓р╕Фр╣Др╕Яр╕ер╣М: ${uploadStats.fileSize ? (uploadStats.fileSize / 1024 / 1024).toFixed(2) + 'MB' : 'N/A'}
- р╕Ир╕│р╕Щр╕зр╕Щр╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф: ${uploadStats.totalRecords?.toLocaleString() || 'N/A'}
- р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З: ${uploadStats.validRecords?.toLocaleString() || 'N/A'}
- р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Чр╕╡р╣Ир╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Бр╕ер╣Йр╕з: ${uploadStats.insertedRecords?.toLocaleString() || 'N/A'}
- р╣Ар╕зр╕ер╕▓р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е: ${uploadStats.processingTime || 'N/A'}
- р╕нр╕▒р╕Хр╕гр╕▓р╕Др╕зр╕▓р╕бр╕кр╕│р╣Ар╕гр╣Зр╕И: ${uploadSuccessRate ? uploadSuccessRate + '%' : 'N/A'}
- р╕кр╕Цр╕▓р╕Щр╕░: ${uploadStats.success ? 'тЬЕ р╕кр╕│р╣Ар╕гр╣Зр╕И' : 'тЭМ р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з'}` : '\nЁЯУд р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣М';

      const report = `р╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М Access Log р╕Йр╕Ър╕▒р╕Ър╕кр╕бр╕Ър╕╣р╕гр╕Ур╣М
========================================================

${systemInfo}

ЁЯУК р╕кр╕Цр╕┤р╕Хр╕┤р╕гр╕зр╕б:
- р╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф: ${stats.totalAccess?.toLocaleString() || 0} р╕Др╕гр╕▒р╣Йр╕З
- р╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И: ${stats.successfulAccess?.toLocaleString() || 0} р╕Др╕гр╕▒р╣Йр╕З (${stats.totalAccess ? ((stats.successfulAccess / stats.totalAccess) * 100).toFixed(1) : 0}%)
- р╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Цр╕╣р╕Бр╕Ыр╕Пр╕┤р╣Ар╕кр╕Ш: ${stats.deniedAccess?.toLocaleString() || 0} р╕Др╕гр╕▒р╣Йр╕З (${stats.totalAccess ? ((stats.deniedAccess / stats.totalAccess) * 100).toFixed(1) : 0}%)
- р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Лр╣Йр╕│: ${stats.uniqueUsers?.toLocaleString() || 0} р╕Др╕Щ
- р╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕е: ${stats.dateRange || 'р╣Др╕бр╣Ир╕гр╕░р╕Ър╕╕'}

ЁЯУН р╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Хр╕▓р╕бр╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣И (Top 10):
${chartData.locationData?.slice(0, 10).map(item => `- ${item.name}: ${item.value.toLocaleString()} р╕Др╕гр╕▒р╣Йр╕З`).join('\n') || 'р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е'}

ЁЯХР р╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Хр╕▓р╕бр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓:
${chartData.timeData?.map(item => `- ${item.name}: ${item.value.toLocaleString()} р╕Др╕гр╕▒р╣Йр╕З`).join('\n') || 'р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е'}

ЁЯОп р╕Чр╕┤р╕ир╕Чр╕▓р╕Зр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕З:
${chartData.directionData?.map(item => `- ${item.name}: ${item.value.toLocaleString()} р╕Др╕гр╕▒р╣Йр╕З`).join('\n') || 'р╣Др╕бр╣Ир╕бр╕╡р╕Вр╣Йр╕нр╕бр╕╣р╕е'}

${uploadInfo}

ЁЯТм р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Бр╕▒р╕Ъ AI:
${chatMessages.length > 0 ?
          chatMessages.map(msg => `${msg.type === 'user' ? 'ЁЯСд р╕Др╕│р╕Цр╕▓р╕б' : 'ЁЯдЦ р╕Др╕│р╕Хр╕нр╕Ъ'}: ${msg.content}`).join('\n\n') :
          'р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕бр╕╡р╕Бр╕▓р╕гр╕кр╕Щр╕Чр╕Щр╕▓р╕Бр╕▒р╕Ъ AI'
        }

ЁЯЪи р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Фр╣Йр╕▓р╕Щр╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в:
- р╕Др╕зр╕▓р╕бр╕Ьр╕┤р╕Фр╕Ыр╕Бр╕Хр╕┤р╕Чр╕╡р╣Ир╕Хр╕гр╕зр╕Ир╕Юр╕Ъ: р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╣Гр╕Щ Security Alerts
- р╕Бр╕▓р╕гр╣Бр╕Ир╣Йр╕Зр╣Ар╕Хр╕╖р╕нр╕Щр╕Фр╣Йр╕▓р╕Щр╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в: р╕Фр╕╣р╣Гр╕Щр╣Бр╕Чр╣Зр╕Ъ "р╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М"

ЁЯУЛ р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╕гр╕▓р╕вр╕Зр╕▓р╕Щ:
- р╕кр╕гр╣Йр╕▓р╕Зр╕гр╕▓р╕вр╕Зр╕▓р╕Щр╣Ар╕бр╕╖р╣Ир╕н: ${new Date().toLocaleString('th-TH')}
- р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М: ${logData.length.toLocaleString()} р╕гр╕▓р╕вр╕Бр╕▓р╕г
- р╣Ар╕зр╕нр╕гр╣Мр╕Кр╕▒р╕Щр╕гр╕░р╕Ър╕Ъ: Simple Design v1.0

========================================================
р╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕Щр╕╡р╣Йр╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Фр╕вр╕гр╕░р╕Ър╕Ъ Access Log Analyzer
`;

      const blob = new Blob([report], { type: 'text/plain;charset=utf-8' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `access-log-report-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      console.log('тЬЕ Report exported successfully');
    } catch (exportError) {
      console.error('тЭМ Export failed:', exportError);
      setError('р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╣Ир╕Зр╕нр╕нр╕Бр╕гр╕▓р╕вр╕Зр╕▓р╕Щр╣Др╕Фр╣Й р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╕нр╕Зр╣Гр╕лр╕бр╣Ир╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕З');
    } finally {
      setIsLoading(false);
    }
  };

  // Tab change handler
  const handleTabChange = (tabId) => {
    setActiveTab(tabId);
    clearError();

    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'tab_change', {
        event_category: 'navigation',
        event_label: tabId,
        custom_parameters: {
          previous_tab: activeTab,
          has_upload_data: logData.length > 0,
          system_health: Object.values(systemStatus).every(status => status === 'connected')
        }
      });
    }
  };

  const handleUploadError = (error) => {
    console.error('тЭМ Upload error in App:', error);
    setError(`р╕Бр╕▓р╕гр╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕ер╣Йр╕бр╣Ар╕лр╕ер╕з: ${error}`);
  };

  const getSystemStatusColor = () => {
    const connected = Object.values(systemStatus).filter(status => status === 'connected').length;
    const total = Object.keys(systemStatus).length;

    if (process.env.NODE_ENV === 'development') {
      if (connected >= 1) return 'text-blue-600';
      return 'text-yellow-600';
    }

    if (connected === total) return 'text-green-600';
    if (connected >= total / 2) return 'text-yellow-600';
    return 'text-red-600';
  };

  // Render main content
  const renderContent = () => {
    try {
      switch (activeTab) {
        case 'upload':
          return (
            <UploadPage
              isUploading={isUploading}
              uploadProgress={uploadProgress}
              onFileUpload={handleFileUpload}
              logDataCount={logData.length}
              uploadError={uploadError}
            />
          );

        case 'dashboard':
          return (
            <DashboardPage
              filteredData={filteredData}
              stats={stats}
              chartData={chartData}
              filters={filters}
              onFilterChange={handleFilterChange}
              onExportReport={exportReport}
              isLoading={isLoading}
              onError={setError}
              uploadStats={uploadStats}
              systemStatus={systemStatus}
            />
          );

        case 'chat':
          return (
            <ChatPage
              chatMessages={chatMessages}
              currentMessage={currentMessage}
              setCurrentMessage={setCurrentMessage}
              onSendMessage={handleSendMessage}
              isAnalyzing={isAnalyzing}
              isAIAvailable={systemStatus.ai === 'connected'}
              onError={setError}
              logDataStats={stats}
              uploadStats={uploadStats}
            />
          );

        case 'analytics':
          return (
            <div className="space-y-4">
              {/* Analytics Header */}
              <div className="bg-white rounded-lg shadow-sm p-6">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <h1 className="text-2xl font-bold text-gray-900 flex items-center">
                      <span className="mr-3">ЁЯЫбя╕П</span>
                      р╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в
                    </h1>
                    <p className="text-gray-600 mt-1">
                      р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Бр╕ер╕░р╕Хр╕┤р╕Фр╕Хр╕▓р╕бр╕Др╕зр╕▓р╕бр╕Ьр╕┤р╕Фр╕Ыр╕Бр╕Хр╕┤р╣Гр╕Щр╕гр╕░р╕Ър╕Ър╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓-р╕нр╕нр╕Б
                    </p>
                  </div>
                  <div className="text-right">
                    <div className="flex items-center text-sm text-gray-500 mb-2">
                      <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                      <span>р╕нр╕▒р╕Ыр╣Ар╕Фр╕Хр╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М</span>
                    </div>
                    {uploadStats && (
                      <div className="text-xs text-gray-400">
                        р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕ер╣Ир╕▓р╕кр╕╕р╕Ф: {uploadStats.fileName || 'N/A'}
                      </div>
                    )}
                  </div>
                </div>

                {/* Quick Stats */}
                <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                  <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
                    <div className="flex items-center">
                      <span className="text-2xl mr-3">ЁЯУК</span>
                      <div>
                        <p className="text-sm font-medium text-blue-600">р╣Ар╕лр╕Хр╕╕р╕Бр╕▓р╕гр╕Ур╣Мр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф</p>
                        <p className="text-2xl font-bold text-blue-700">{stats.totalAccess?.toLocaleString() || 0}</p>
                        <p className="text-xs text-blue-500">
                          {uploadStats?.totalRecords && `р╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М ${uploadStats.totalRecords.toLocaleString()} р╕гр╕▓р╕вр╕Бр╕▓р╕г`}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                    <div className="flex items-center">
                      <span className="text-2xl mr-3">тЬЕ</span>
                      <div>
                        <p className="text-sm font-medium text-green-600">р╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕кр╕│р╣Ар╕гр╣Зр╕И</p>
                        <p className="text-2xl font-bold text-green-700">{stats.successfulAccess?.toLocaleString() || 0}</p>
                        <p className="text-xs text-green-500">
                          {stats.totalAccess ? `${((stats.successfulAccess / stats.totalAccess) * 100).toFixed(1)}%` : '0%'}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="bg-red-50 p-4 rounded-lg border border-red-200">
                    <div className="flex items-center">
                      <span className="text-2xl mr-3">ЁЯЪл</span>
                      <div>
                        <p className="text-sm font-medium text-red-600">р╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓р╕Цр╕╢р╕Зр╕Цр╕╣р╕Бр╕Ыр╕Пр╕┤р╣Ар╕кр╕Ш</p>
                        <p className="text-2xl font-bold text-red-700">{stats.deniedAccess?.toLocaleString() || 0}</p>
                        <p className="text-xs text-red-500">
                          {stats.totalAccess ? `${((stats.deniedAccess / stats.totalAccess) * 100).toFixed(1)}%` : '0%'}
                        </p>
                      </div>
                    </div>
                  </div>

                  <div className="bg-purple-50 p-4 rounded-lg border border-purple-200">
                    <div className="flex items-center">
                      <span className="text-2xl mr-3">ЁЯСе</span>
                      <div>
                        <p className="text-sm font-medium text-purple-600">р╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Лр╣Йр╕│</p>
                        <p className="text-2xl font-bold text-purple-700">{stats.uniqueUsers?.toLocaleString() || 0}</p>
                        <p className="text-xs text-purple-500">
                          {uploadStats?.validRecords && `р╕Ир╕▓р╕Б ${uploadStats.validRecords.toLocaleString()} р╕гр╕▓р╕вр╕Бр╕▓р╕г`}
                        </p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Upload Quality Indicator */}
                {uploadStats && (
                  <div className="mt-4 p-4 bg-gray-50 border border-gray-200 rounded-lg">
                    <div className="flex items-center justify-between">
                      <div>
                        <h4 className="font-medium text-gray-900">р╕Др╕╕р╕Ур╕ар╕▓р╕Юр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╣Ир╕▓р╕кр╕╕р╕Ф</h4>
                        <p className="text-sm text-gray-600">
                          р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕Ир╕▓р╕Бр╣Др╕Яр╕ер╣М: {uploadStats.fileName || 'N/A'}
                        </p>
                      </div>
                      <div className="text-right">
                        <div className={`px-3 py-1 rounded-full text-sm font-medium ${uploadSuccessRate >= 90 ? 'bg-green-100 text-green-800' :
                            uploadSuccessRate >= 80 ? 'bg-blue-100 text-blue-800' :
                              uploadSuccessRate >= 70 ? 'bg-yellow-100 text-yellow-800' :
                                'bg-red-100 text-red-800'
                          }`}>
                          {uploadSuccessRate || 'N/A'}% р╕Др╕зр╕▓р╕бр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З
                        </div>
                        <p className="text-xs text-gray-500 mt-1">
                          р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╣Гр╕Щ {uploadStats.processingTime || 'N/A'}
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </div>

              {/* The SecurityDashboard component was removed from here to fix the error */}
              <SecurityAlerts
                logData={logData}
                uploadStats={uploadStats}
              />
            </div>
          );

        default:
          return (
            <div className="bg-white rounded-lg shadow-sm p-12">
              <div className="text-center">
                <span className="text-4xl mb-4 block">ЁЯдФ</span>
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  р╣Др╕бр╣Ир╕Юр╕Ър╕лр╕Щр╣Йр╕▓р╕Чр╕╡р╣Ир╕Др╕╕р╕Ур╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г
                </h3>
                <p className="text-gray-600 mb-4">
                  р╕Бр╕гр╕╕р╕Ур╕▓р╣Ар╕ер╕╖р╕нр╕Бр╣Бр╕Чр╣Зр╕Ър╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Ир╕▓р╕Бр╕Фр╣Йр╕▓р╕Щр╕Ър╕Щ
                </p>
                <button
                  onClick={() => handleTabChange('upload')}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  р╕Бр╕ер╕▒р╕Ър╣Др╕Ыр╕лр╕Щр╣Йр╕▓р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Ф
                </button>
              </div>
            </div>
          );
      }
    } catch (renderError) {
      console.error('тЭМ Content render error:', renderError);
      return (
        <div className="bg-white rounded-lg shadow-sm p-12">
          <div className="text-center">
            <span className="text-4xl mb-4 block">тЭМ</span>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Бр╕кр╕Фр╕Зр╕Ьр╕е
            </h3>
            <p className="text-gray-600 mb-4">
              р╕Бр╕гр╕╕р╕Ур╕▓р╕ер╕нр╕Зр╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕лр╕Щр╣Йр╕▓р╣Ар╕зр╣Зр╕Ър╕лр╕гр╕╖р╕нр╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕Ьр╕╣р╣Йр╕Фр╕╣р╣Бр╕ер╕гр╕░р╕Ър╕Ъ
            </p>
            <button
              onClick={() => window.location.reload()}
              className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              р╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕лр╕Щр╣Йр╕▓
            </button>
          </div>
        </div>
      );
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />

      <div className="max-w-7xl mx-auto px-4 py-4">
        {/* Error Banner */}
        {error && (
          <div className="mb-4 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center">
                <svg className="h-5 w-5 text-yellow-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
                <div>
                  <p className="text-sm font-medium text-yellow-800">р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф</p>
                  <p className="text-sm text-yellow-700">{error}</p>
                </div>
              </div>
              <button
                onClick={clearError}
                className="text-yellow-400 hover:text-yellow-600 transition-colors"
              >
                <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
          </div>
        )}

        {/* Loading Overlay */}
        {isLoading && (
          <div className="fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center">
            <div className="bg-white rounded-lg p-6 max-w-sm mx-4">
              <div className="flex items-center">
                <svg className="animate-spin h-5 w-5 text-blue-600 mr-3" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" />
                  <path className="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                </svg>
                <span className="text-gray-900">р╕Бр╕│р╕ер╕▒р╕Зр╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е...</span>
              </div>
            </div>
          </div>
        )}

        {/* Navigation and Status */}
        <div className="mb-4 flex items-center justify-between">
          <NavigationTabs
            activeTab={activeTab}
            setActiveTab={handleTabChange}
          />

          {/* System Status */}
          <div className="flex items-center space-x-4 text-sm">
            <div className="flex items-center space-x-2">
              <div className={`w-2 h-2 rounded-full ${systemStatus.ai === 'connected' ? 'bg-green-500' :
                  systemStatus.ai === 'checking' ? 'bg-yellow-500' : 'bg-red-500'
                }`}></div>
              <span className="text-gray-600">AI</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className={`w-2 h-2 rounded-full ${systemStatus.database === 'connected' ? 'bg-green-500' :
                  systemStatus.database === 'checking' ? 'bg-yellow-500' : 'bg-red-500'
                }`}></div>
              <span className="text-gray-600">DB</span>
            </div>
            <div className="flex items-center space-x-2">
              <div className={`w-2 h-2 rounded-full ${systemStatus.upload === 'connected' ? 'bg-green-500' :
                  systemStatus.upload === 'checking' ? 'bg-yellow-500' : 'bg-orange-500'
                }`}></div>
              <span className="text-gray-600">Upload</span>
            </div>
            <span className={`text-xs font-medium ${getSystemStatusColor()}`}>
              {Object.values(systemStatus).every(status => status === 'connected') ? 'р╕гр╕░р╕Ър╕Ър╕Юр╕гр╣Йр╕нр╕б' :
                Object.values(systemStatus).some(status => status === 'checking') ? 'р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ...' :
                  process.env.NODE_ENV === 'development' ? 'р╣Вр╕лр╕бр╕Фр╕Юр╕▒р╕Тр╕Щр╕▓' : 'р╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓'}
            </span>
          </div>
        </div>

        {/* Main Content */}
        <main role="main" aria-label="р╣Ар╕Щр╕╖р╣Йр╕нр╕лр╕▓р╕лр╕ер╕▒р╕Б">
          {renderContent()}
        </main>
      </div>

      {/* Footer */}
      <footer className="bg-white border-t border-gray-200 mt-8">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between text-sm text-gray-500">
            <div>
              <p>┬й 2024 Access Log Analyzer - р╕гр╕░р╕Ър╕Ър╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Бр╕▓р╕гр╣Ар╕Вр╣Йр╕▓-р╕нр╕нр╕Б</p>
              <p className="text-xs mt-1">р╕гр╕нр╕Зр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Бр╕Ър╕Ър╣Ар╕гр╕╡р╕вр╕ер╣Др╕Чр╕бр╣М</p>
            </div>
            <div className="flex items-center space-x-6 text-xs">
              <span className={`flex items-center ${getSystemStatusColor()}`}>
                <div className={`w-2 h-2 rounded-full mr-2 ${Object.values(systemStatus).every(status => status === 'connected') ? 'bg-green-500' :
                    Object.values(systemStatus).some(status => status === 'checking') ? 'bg-yellow-500' : 'bg-red-500'
                  }`}></div>
                {Object.values(systemStatus).every(status => status === 'connected') ? 'р╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Зр╕▓р╕Щр╕Ыр╕Бр╕Хр╕┤' :
                  Object.values(systemStatus).some(status => status === 'checking') ? 'р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ' : 'р╕гр╕░р╕Ър╕Ър╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓'}
              </span>
              <span>ЁЯУК р╕Вр╣Йр╕нр╕бр╕╣р╕е: {logData.length.toLocaleString()} р╕гр╕▓р╕вр╕Бр╕▓р╕г</span>
              {uploadStats && (
                <span>ЁЯУд р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕ер╣Ир╕▓р╕кр╕╕р╕Ф: {uploadStats.fileName || 'N/A'}</span>
              )}
              <span>ЁЯЪА Simple Design v1.0</span>
            </div>
          </div>

          {/* Upload Statistics in Footer */}
          {uploadStats && uploadStats.success && (
            <div className="mt-3 pt-3 border-t border-gray-200">
              <div className="flex items-center justify-between text-xs text-gray-400">
                <span>
                  р╣Др╕Яр╕ер╣Мр╕ер╣Ир╕▓р╕кр╕╕р╕Ф: {uploadStats.fileName} ({uploadStats.fileSize ? `${(uploadStats.fileSize / 1024 / 1024).toFixed(2)}MB` : 'N/A'})
                </span>
                <span>
                  р╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е: {uploadStats.processingTime || 'N/A'} тАв
                  р╕нр╕▒р╕Хр╕гр╕▓р╕кр╕│р╣Ар╕гр╣Зр╕И: {uploadSuccessRate || 'N/A'}% тАв
                  р╕гр╕▓р╕вр╕Бр╕▓р╕г: {uploadStats.insertedRecords?.toLocaleString() || 'N/A'}
                </span>
              </div>
            </div>
          )}
        </div>
      </footer>
    </div>
  );
};

// Error Boundary Component
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error('Error Boundary caught an error:', error, errorInfo);
    this.setState({ errorInfo });

    if (typeof window !== 'undefined' && window.gtag) {
      window.gtag('event', 'exception', {
        description: error.toString(),
        fatal: true
      });
    }
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="min-h-screen bg-gray-50 flex items-center justify-center">
          <div className="text-center max-w-md mx-4">
            <span className="text-6xl mb-4 block">ЁЯТе</span>
            <h1 className="text-2xl font-bold text-gray-900 mb-2">
              р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Др╕▓р╕Фр╕Др╕┤р╕Ф
            </h1>
            <p className="text-gray-600 mb-4">
              р╕гр╕░р╕Ър╕Ъ Access Log Analyzer р╕Юр╕Ър╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф
            </p>
            <p className="text-sm text-gray-500 mb-6">
              р╕гр╕лр╕▒р╕кр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {this.state.error?.message || 'Unknown error'}
            </p>
            <div className="flex space-x-3 justify-center">
              <button
                onClick={() => window.location.reload()}
                className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                р╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕лр╕Щр╣Йр╕▓
              </button>
              <button
                onClick={() => this.setState({ hasError: false, error: null, errorInfo: null })}
                className="px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
              >
                р╕ер╕нр╕Зр╕нр╕╡р╕Бр╕Др╕гр╕▒р╣Йр╕З
              </button>
            </div>
            {process.env.NODE_ENV === 'development' && this.state.errorInfo && (
              <details className="mt-4 text-left">
                <summary className="cursor-pointer text-sm text-gray-500">р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф (Development)</summary>
                <pre className="text-xs text-gray-400 mt-2 bg-gray-100 p-2 rounded overflow-auto">
                  {this.state.error && this.state.error.toString()}
                  {this.state.errorInfo.componentStack}
                </pre>
              </details>
            )}
          </div>
        </div>
      );
    }

    return this.props.children;
  }
}

// Main App wrapper with Error Boundary
const App = () => (
  <ErrorBoundary>
    <AccessLogAnalyzer />
  </ErrorBoundary>
);

export default App;