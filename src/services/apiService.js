// frontend/services/apiService.js - Fixed version to prevent object parameter issues

class ApiService {
  constructor() {
    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î BASE_URL ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ localhost:3001 ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    this.BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001';
    this.DEFAULT_TIMEOUT = 30000; // 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö timeout ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  }

  /**
   * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameters ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô [object Object] ‡πÉ‡∏ô URL
   */
  /**
   * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö parameters ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô [object Object] ‡πÉ‡∏ô URL
   * ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ array ‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
   */
  cleanParams(params) {
    if (!params || typeof params !== 'object') {
      return {};
    }

    const cleanedParams = {};

    Object.entries(params).forEach(([key, value]) => {
      // ‡∏Ç‡πâ‡∏≤‡∏° null, undefined
      if (value === null || value === undefined) {
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà array
      if (typeof value === 'object' && !Array.isArray(value)) {
        console.warn(`‚ö†Ô∏è Parameter '${key}' is a non-array object, skipping:`, value);
        console.warn('üìç This usually happens when state objects are passed as parameters');
        return;
      }

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ (string, number, boolean, array) ‡πÉ‡∏´‡πâ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
      cleanedParams[key] = value;
    });

    console.log('üßπ Cleaned parameters:', cleanedParams);
    return cleanedParams;
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠ HTTP ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Timeout
   * @param {string} endpoint - ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á API (‡πÄ‡∏ä‡πà‡∏ô '/api/logs')
   * @param {string} method - ‡πÄ‡∏°‡∏ò‡∏≠‡∏î HTTP (GET, POST, PUT, DELETE)
   * @param {object} [data=null] - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö POST, PUT)
   * @param {object} [params=null] - ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå Query (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GET)
   * @param {number} [timeout=this.DEFAULT_TIMEOUT] - ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ timeout (‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
   * @returns {Promise<object>} - ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API
   */
  async request(endpoint, method = 'GET', data = null, params = null, timeout = this.DEFAULT_TIMEOUT) {
    const controller = new AbortController();
    const id = setTimeout(() => controller.abort(), timeout);

    let url = `${this.BASE_URL}${endpoint}`;
    const options = {
      method,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      signal: controller.signal, // ‡πÄ‡∏û‡∏¥‡πà‡∏° AbortSignal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠
    };

    // üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î parameters ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á query string ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö array
    if (params) {
      const cleanedParams = this.cleanParams(params);
      const queryParts = [];

      for (const key in cleanedParams) {
        const value = cleanedParams[key];
        if (Array.isArray(value)) {
          value.forEach(item => {
            queryParts.push(`${encodeURIComponent(key)}=${encodeURIComponent(item)}`);
          });
        } else {
          queryParts.push(`${encodeURIComponent(key)}=${encodeURIComponent(value)}`);
        }
      }

      if (queryParts.length > 0) {
        url = `${url}?${queryParts.join('&')}`;
      }
    }

    if (data) {
      options.body = JSON.stringify(data);
    }

    try {
      console.log(`üì° [API] ${method}: ${url}`);

      const response = await fetch(url, options);
      clearTimeout(id); // ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å timeout ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö

      console.log(`üì® [API] Response: ${response.status} ${response.statusText}`);

      if (!response.ok) {
        // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô body ‡πÄ‡∏õ‡πá‡∏ô text ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô "body stream already read"
        const errorText = await response.text();
        let errorJson;
        try {
          // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° parse text ‡πÄ‡∏õ‡πá‡∏ô JSON
          errorJson = JSON.parse(errorText);
        } catch (e) {
          // ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ text ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡πÅ‡∏ó‡∏ô
          errorJson = { error: errorText || response.statusText };
        }

        const errorMessage = `HTTP ${response.status}: ${errorJson.error || errorJson.message || 'Unknown server error'}`;
        console.error('‚ùå API Error:', errorMessage);

        // üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 500 errors
        if (response.status === 500) {
          console.error('üí• Server Error Details:', {
            url,
            method,
            params: params ? this.cleanParams(params) : null,
            responseText: errorText.substring(0, 500) // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 500 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å
          });
        }

        throw new Error(errorMessage);
      }

      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        const result = await response.json();
        console.log('‚úÖ API Success:', {
          endpoint,
          method,
          dataKeys: Object.keys(result),
          responseSize: JSON.stringify(result).length
        });
        return result;
      }
      return await response.text(); // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô text ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON

    } catch (error) {
      clearTimeout(id);
      if (error.name === 'AbortError') {
        console.error(`‚è∞ API Request timed out: ${method} ${endpoint}`);
        throw new Error('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (Timeout)');
      }
      console.error(`‚ùå API Request failed: ${method} ${endpoint}`, error);
      throw error; // ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ error ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
    }
  }

  // ============== API Endpoints ==============

  // Health Check
  async healthCheck() {
    try {
      return await this.request('/api/health');
    } catch (error) {
      console.warn('Health check failed, trying alternative endpoints...');

      // ‡∏•‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô
      const alternatives = ['/api/status', '/api/ping', '/health', '/status'];

      for (const alt of alternatives) {
        try {
          console.log(`üîÑ Trying alternative health check: ${alt}`);
          return await this.request(alt);
        } catch (altError) {
          console.warn(`Alternative ${alt} failed:`, altError.message);
          continue;
        }
      }

      throw error; // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ó‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    }
  }

  // üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: Logs - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î parameters
  async getLogs(params) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î parameters
      console.log('üì• getLogs called with params:', params);

      // üö® ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ params ‡πÑ‡∏°‡πà‡∏°‡∏µ object
      if (params && typeof params === 'object') {
        const problematicKeys = Object.entries(params).filter(([key, value]) =>
          typeof value === 'object' && value !== null && !Array.isArray(value)
        );

        if (problematicKeys.length > 0) {
          console.warn('‚ö†Ô∏è Found object parameters that will cause [object Object] error, attempting to clean:', problematicKeys);

          // ‡∏•‡∏ö object parameters ‡∏≠‡∏≠‡∏Å
          const cleanedParams = { ...params };
          problematicKeys.forEach(([key]) => {
            delete cleanedParams[key];
          });

          console.log('üßπ Cleaned params (removed objects):', cleanedParams);
          params = cleanedParams;
        }
      }

      // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ endpoint ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      const endpoint = '/api/logs';
      console.log(`üîç Fetching logs from endpoint: ${endpoint}`);
      const result = await this.request(endpoint, 'GET', null, params);

      console.log(`‚úÖ Success with endpoint: ${endpoint}`);
      return result;
    } catch (error) {
      console.error('‚ùå getLogs failed:', error);
      throw error;
    }
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Security Dashboard
  async getSuspiciousActivities(params) {
    try {
      console.log('üö® getSuspiciousActivities called with params:', params);

      const endpoints = ['/api/suspicious-activities', '/api/suspicious', '/api/alerts', '/api/incidents'];
      let lastError;

      for (const endpoint of endpoints) {
        try {
          console.log(`üîç Trying suspicious endpoint: ${endpoint}`);
          const result = await this.request(endpoint, 'GET', null, params);

          console.log(`‚úÖ Success with suspicious endpoint: ${endpoint}`);
          return result;
        } catch (error) {
          console.warn(`‚ùå Suspicious endpoint ${endpoint} failed:`, error.message);
          lastError = error;

          if (error.message.includes('404')) {
            continue;
          } else {
            break;
          }
        }
      }

      throw lastError || new Error('All suspicious activities endpoints failed');
    } catch (error) {
      console.error('‚ùå getSuspiciousActivities failed:', error);
      throw error;
    }
  }

  async getDashboardStats(params) {
    try {
      console.log('üìä getDashboardStats called with params:', params);

      const endpoints = ['/api/dashboard/stats', '/api/stats', '/api/dashboard', '/api/summary'];
      let lastError;

      for (const endpoint of endpoints) {
        try {
          console.log(`üîç Trying stats endpoint: ${endpoint}`);
          const result = await this.request(endpoint, 'GET', null, params);

          console.log(`‚úÖ Success with stats endpoint: ${endpoint}`);
          return result;
        } catch (error) {
          console.warn(`‚ùå Stats endpoint ${endpoint} failed:`, error.message);
          lastError = error;

          if (error.message.includes('404')) {
            continue;
          } else {
            break;
          }
        }
      }

      throw lastError || new Error('All dashboard stats endpoints failed');
    } catch (error) {
      console.error('‚ùå getDashboardStats failed:', error);
      throw error;
    }
  }

  // ... (‡πÄ‡∏Å‡πá‡∏ö methods ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ)
  async getLogById(id) {
    return this.request(`/api/logs/${id}`);
  }

  async updateLog(id, data) {
    return this.request(`/api/logs/${id}`, 'PUT', data);
  }

  async deleteLogs(ids) {
    return this.request('/api/logs', 'DELETE', { ids });
  }

  // Filter Options
  async getLocations() {
    return this.request('/api/logs/locations');
  }

  async getDirections() {
    return this.request('/api/logs/directions');
  }

  async getUserTypes() {
    return this.request('/api/logs/user-types');
  }

  async getDevices() {
    return this.request('/api/logs/devices');
  }

  // Stats
  async getStats(params) {
    return this.request('/api/stats', 'GET', null, params);
  }

  async getDailyStats(params) {
    return this.request('/api/stats/daily', 'GET', null, params);
  }

  async getHourlyStats(params) {
    return this.request('/api/stats/hourly', 'GET', null, params);
  }

  async getLocationStats(params) {
    return this.request('/api/stats/locations', 'GET', null, params);
  }

  async getUserActivityStats(params) {
    return this.request('/api/stats/user-activity', 'GET', null, params);
  }

  async getDeviceStats(params) {
    return this.request('/api/stats/devices', 'GET', null, params);
  }

  async getMonthlyStats(params) {
    return this.request('/api/stats/monthly', 'GET', null, params);
  }

  async getSecurityAlerts(params) {
    return this.request('/api/stats/security-alerts', 'GET', null, params);
  }

  // Charts
  async getChartData(type, params) {
    return this.request(`/api/charts/${type}`, 'GET', null, params);
  }

  /**
   * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å Client (JSON)
   * ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà uploadService ‡πÉ‡∏ä‡πâ
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡πÉ‡∏´‡πâ‡∏¢‡∏≤‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
   */
  async appendLogData(data) {
    const BATCH_INSERT_TIMEOUT = 120000; // 2 ‡∏ô‡∏≤‡∏ó‡∏µ
    return this.request('/api/logs/batch-append', 'POST', { logs: data }, null, BATCH_INSERT_TIMEOUT);
  }

  /**
   * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (FormData)
   * ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢ uploadService.js ‡∏ï‡∏±‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
   */
  async uploadLogFile(file) {
    const formData = new FormData();
    formData.append('file', file);

    // ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ fetch ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö FormData
    try {
      const response = await fetch(`${this.BASE_URL}/api/upload-log`, {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        const errorText = await response.text();
        let errorJson;
        try {
          errorJson = JSON.parse(errorText);
        } catch (e) {
          errorJson = { error: errorText || response.statusText };
        }
        throw new Error(`HTTP ${response.status}: ${errorJson.error || 'Unknown server error'}`);
      }
      return await response.json();
    } catch (error) {
      console.error('Upload API Request failed:', error);
      throw error;
    }
  }

  async getUploadStats() {
    return this.request('/api/upload-log/stats');
  }

  async getUploadHistory(params) {
    return this.request('/api/upload-log/history', 'GET', null, params);
  }

  // Export
  async exportData(format, params) {
    // ‡∏Å‡∏≤‡∏£ export ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô, ‡∏ï‡∏±‡πâ‡∏á timeout ‡πÉ‡∏´‡πâ‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
    const EXPORT_TIMEOUT = 180000; // 3 ‡∏ô‡∏≤‡∏ó‡∏µ
    const response = await this.request(`/api/export/${format}`, 'GET', null, params, EXPORT_TIMEOUT);
    return new Blob([response]); // ‡πÅ‡∏õ‡∏•‡∏á response ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô text/blob ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Blob
  }
}

const apiService = new ApiService();
export default apiService;
